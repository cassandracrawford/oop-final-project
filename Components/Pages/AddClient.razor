@using FinalProject.Data
@using Microsoft.Data.SqlClient
@using System.Text.RegularExpressions
@inject DatabaseConnection dbConnection

<!--Form for adding a new client-->
<div class="add-client-popup" style="@(ShowAddClient ? "display: block;" : "display: none;")">
    <div class="add-client-content">
        <form>
            <div class="row g-3">
                <!--First Name-->
                <div class="col-12">
                    <label for="firstName" class="form-label">First Name:</label>
                    <input type="text" class="form-control" placeholder="Enter First Name.." aria-label="First Name" id="firstName" name="firstName" @bind="@client.FirstName">
                </div>
                <!--Last Name-->
                <div class="col-12">
                    <label for="lastName" class="form-label">Last Name:</label>
                    <input type="text" class="form-control" placeholder="Enter Last Name.." aria-label="Last Name" id="lastName" name="lastName" @bind="@client.LastName">
                </div>
                <!--Contact Number-->
                <div class="col-12">
                    <label for="contactNumber" class="form-label">Contact Number:</label>
                    <input type="text" class="form-control" placeholder="(999) 999-9999" aria-label="Contact Number" id="phoneNumber" name="phoneNumber" title="Format: (999) 999-9999" @bind="@client.PhoneNum">
                </div>
                <!--Email-->
                <div class="col-12">
                    <label for="eMail" class="form-label">Email:</label>
                    <input type="email" class="form-control" placeholder="your.email@gmail.com" aria-label="Email" id="emailAdd" name="emailAd" title="Format: your.email@domain.com" @bind="@client.EMail">
                </div>
                <!--Customer Status-->
                <div class="col-md-6">
                    <label for="clientStatus" class="form-label">Status:</label>
                    <select id="inputStatus" class="form-select" name="clientStatus" @bind="@client.ClientStatus">
                        <option selected></option>
                        <option>Active</option>
                        <option>Banned</option>
                    </select>
                </div>
                <!--Discount-->
                <div class="col-md-6">
                    <label for="discount" class="form-label">Discount:</label>
                    <select id="inputDiscount" class="form-select" name="clientDiscount" @bind="@client.Discount">
                        <option selected></option>
                        <option>5</option>
                        <option>10</option>
                        <option>15</option>
                        <option>20</option>
                    </select>
                </div>
                <!--Save and Cancel Buttons-->
                <div class="col-12 button-container">
                    <button type="button" class="btn btn-warning save-button" @onclick="AddNewClient">SAVE</button>
                    <button type="button" class="btn btn-outline-warning close-button" @onclick="CloseAddClient">CANCEL</button>
                </div>
            </div>
        </form>
    </div>
</div>

@code {
    [Parameter]
    public bool ShowAddClient { get; set; } // Parameter to show/hide popup for Add Client page

    [Parameter]
    public EventCallback<bool> OnClose { get; set; } // Event callback triggered when popup for Add Client is closed

    [Parameter]
    public EventCallback OnClientAdded { get; set; } // Event callback triggered when customer is added successfully

    [Parameter]
    public EventCallback<string> OnShowToast { get; set; } // Event callback to show toast notification

    private Customer client = new Customer(); // To bind the client details

    private async Task AddNewClient()
    {
        try
        {
            // Validate client's details if not null or in valid format for Contact# and Email
            if (string.IsNullOrEmpty(client.FirstName))
            {
                throw new InvalidFirstNameException();
            }
            else if (string.IsNullOrEmpty(client.LastName))
            {
                throw new InvalidLastNameException();
            }
            else if (string.IsNullOrEmpty(client.PhoneNum))
            {
                throw new InvalidPhoneException();
            }
            else if (string.IsNullOrEmpty(client.EMail))
            {
                throw new InvalidEmailException();
            }
            else if (!Regex.IsMatch(client.EMail, @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"))
            {
                throw new InvalidEmailException();
            }
            else if (!Regex.IsMatch(client.PhoneNum, @"^\(\d{3}\) \d{3}-\d{4}$"))
            {
                throw new InvalidPhoneException();
            }
            else
            {
                // Adds client to the database
                dbConnection.AddClient(client);
                client = new Customer();

                // Nofify Client.razor component that client has been added and show success message
                await OnClientAdded.InvokeAsync();
                await OnShowToast.InvokeAsync("Client added successfully!");

                // Closes the popup for Add Client after adding the client
                await CloseAddClient();
            }
        }
        catch (InvalidFirstNameException e)
        {
            await OnShowToast.InvokeAsync(e.Message);
        }
        catch (InvalidLastNameException e)
        {
            await OnShowToast.InvokeAsync(e.Message);
        }
        catch (InvalidPhoneException e)
        {
            await OnShowToast.InvokeAsync(e.Message);
        }
        catch (InvalidEmailException e)
        {
            await OnShowToast.InvokeAsync(e.Message);
        }
        catch (SqlException e)
        {
            await OnShowToast.InvokeAsync($"Database Error: {e.Message}"); // Handles database specific errors
        }
        catch (Exception e)
        {
            await OnShowToast.InvokeAsync($"System Error: {e.Message}"); // For generic errors
        } 

    }

    // To close the add client popup 
    private async Task CloseAddClient()
    {
        await OnClose.InvokeAsync(false);
    }
}